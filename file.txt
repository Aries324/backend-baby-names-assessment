
# def extract_names(filename):
#     """
#     Given a file name for baby.html, returns a list starting with the year string
#     followed by the name-rank strings in alphabetical order.
#     ['2006', 'Aaliyah 91', Aaron 57', 'Abagail 895', ' ...]
#     """
#     list_to_return = []
#     input_file = open(filename, 'r')
#     content = input_file.read()
#     year = re.search(r'Popularity\sin\s(\d\d\d\d)', content)
#     list_to_return.append(year.group(1))
#     print list_to_return
#     names = re.findall(
#         '<td>(\\d+)</td><td>(\\w+)</td>\\<td>(\\w+)</td>', content)
#     to_be_ranked = {}
#     for name in names:
#         rank, boy, girl = name
#         if boy not in to_be_ranked:
#             to_be_ranked[boy] = rank
#         if girl not in to_be_ranked:
#             to_be_ranked[girl] = rank

#     sorted_names = sorted(to_be_ranked.keys())

#     for each_name in sorted_names:
#         list_to_return.append(each_name + " " + to_be_ranked[each_name])

#     return list_to_return


# def main():
#     # This command-line parsing code is provided.
#     # Make a list of command line arguments, omitting the [0] element
#     # which is the script itself.
#     args = sys.argv[1:]

#     if not args:
#         print 'usage: [--summaryfile] file [file ...]'
#         sys.exit(1)

#     # Notice the summary flag and remove it from args if it is present.
#     summary = False
#     if args[0] == '--summaryfile':
#         summary = True
#         del args[0]

#     # +++your code here+++
#     # For each filename, get the names, then either print the text output
#     # or write it to a summary file
#     for filename in args:
#         names = extract_names(filename)
#         text = '\n'.join(names)

#         if summary:
#             new_summary_file = open(filename + '.summary', 'w')
#             new_summary_file.write(text + '\n')
#             new_summary_file.close()
#         else:
#             print(text)

#         extract_names(args[0])


# if __name__ == '__main__':
#     main()
